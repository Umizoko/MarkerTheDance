{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/index.js","webpack:///./src/js/module/stats.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAiC;;AAEjC;;AAEA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA,KAAK;;;AAGL;AACA;;AAEA;;AAEA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,mDAAmD;AACnD,gDAAgD;AAChD;AACA;AACA;AACA,QAAQ;AACR,8CAA8C;AAC9C,2BAA2B;AAC3B,uCAAuC;AACvC,2BAA2B;;;AAG3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;;AAGA;AACA,sBAAsB,qDAAI;AAC1B;;;AAGA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;ACnLA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAwB,MAAM,OAAO,eAAe,YAAY;AAChE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,+BAA+B;AACvD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAKC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/index.js\");\n","import Stat from './module/stats'\n\nwindow.addEventListener( \"load\", init );\n\nfunction init () {\n\n\n    // create scene\n    const scene = new THREE.Scene();\n\n\n    // create renderer\n    const renderer = new THREE.WebGLRenderer( {\n        canvas: document.querySelector( \"#threeCanvas\" ),\n        alpha: true,\n    } );\n\n    renderer.setClearColor( new THREE.Color( \"black\" ), 0 );\n    // renderer.setSize( 640, 480 );\n    const myCanvas = document.querySelector( '#threeCanvas' );\n    let canvasWidth = myCanvas.clientWidth;\n    let canvasHeight = myCanvas.clientHeight;\n    renderer.setSize( canvasWidth, canvasHeight );\n    renderer.gammaOutput = true;\n\n\n    // create camera\n    var camera = new THREE.Camera();\n    scene.add( camera );\n\n\n    // create light\n    const light = new THREE.DirectionalLight( 0xffffff );\n    light.position.set( 0, 0, 2 );\n    scene.add( light );\n\n\n    // arToolkitSource\n    const source = new THREEx.ArToolkitSource( {\n        sourceType: \"webcam\",\n    } );\n\n    source.init( function onReady () {\n        onResize();\n    } );\n\n\n    // create arToolkitContext\n    const context = new THREEx.ArToolkitContext( {\n        debug: false,\n        cameraParametersUrl: \"ar/camera_para.dat\",\n        detectionMode: \"mono\",\n        imageSmoothingEnabled: true,\n        maxDetectionRate: 30,\n        canvasWidth: source.parameters.sourceWidth,\n        canvasHeight: source.parameters.sourceHeight,\n        // canvasWidth: canvasWidth,\n        // canvasHeight: canvasHeight\n    } );\n\n    console.log( source.parameters );\n\n    context.init( function onCompleted () {\n\n        // コンテクスト初期化が完了\n        // 射影行列をコピー\n        camera.projectionMatrix.copy( context.getProjectionMatrix() );\n\n    } );\n\n\n    // resiza\n    window.addEventListener( \"resize\", function () {\n\n        onResize();\n\n    } );\n\n    function onResize () {\n\n        source.onResizeElement();\n        source.copyElementSizeTo( renderer.domElement );\n        if ( context.arController !== null ) {\n            source.copyElementSizeTo( context.arController.canvas );\n        }\n\n    }\n\n\n    // MarkerのGroup作成\n    const marker = new THREE.Group();\n    scene.add( marker ); // マーカをシーンに追加\n\n    // set arMarkerControls\n    const option = {\n        size: 1,\n        type: 'pattern',\n        patternUrl: 'ar/hiro.patt'\n    }\n    const controls = new THREEx.ArMarkerControls(\n        context,\n        marker,\n        option\n    );\n\n\n    // モデル（メッシュ）\n    // var geo = new THREE.CubeGeometry( 1, 1, 1 ); // cube ジオメトリ（サイズは 1x1x1）\n    // var mat = new THREE.MeshNormalMaterial( { // マテリアルの作成\n    //     transparent: true, // 透過\n    //     opacity: 0.5, // 不透明度\n    //     side: THREE.DoubleSide, // 内側も描く\n    // } );\n    // var mesh1 = new THREE.Mesh( geo, mat ); // メッシュを生成\n    // mesh1.name = \"cube\"; // メッシュの名前（後でピッキングで使う）\n    // mesh1.position.set( 0, 0.5, 0 ); // 初期位置\n    // marker.add( mesh1 ); // メッシュをマーカに追加\n\n\n    // animation\n    let mixier;\n    // gltf loader\n    let loader = new THREE.GLTFLoader();\n\n    // model load\n    loader.load(\n        './assets/voxel/umizoko.gltf',\n        ( gltf ) => {\n\n\n            // animaiton再生\n            const animations = gltf.animations;\n            const object = gltf.scene;\n            if ( animations && animations.length ) {\n                let i;\n                mixier = new THREE.AnimationMixer( object );\n                for ( i = 0; i < animations.length; i++ ) mixier.clipAction( animations[ i ] ).play();\n            }\n\n            // modelをgroupに追加\n            marker.add( object );\n\n        },\n        ( xhr ) => ( console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ) ),\n        ( error ) => ( console.log( 'An error happened ', error ) )\n    );\n\n\n    // performance\n    const stats = new Stat();\n    document.body.appendChild( stats.dom );\n\n\n    // manage animation frame \n    const clock = new THREE.Clock();\n\n\n    // render\n    function render () {\n\n        // obs performance\n        stats.update();\n\n        requestAnimationFrame( render );\n\n        if ( source.ready === false ) return;\n\n        // ar\n        context.update( source.domElement );\n\n        // animation\n        if ( mixier ) mixier.update( clock.getDelta() );\n\n        renderer.render( scene, camera );\n\n    }\n\n    render();\n\n}\n","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n    var mode = 0\n\n    var container = document.createElement( 'div' )\n    container.style.cssText =\n        'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000'\n    container.addEventListener(\n        'click',\n        function ( event ) {\n            event.preventDefault()\n            showPanel( ++mode % container.children.length )\n        },\n        false\n    )\n\n    //\n\n    function addPanel ( panel ) {\n        container.appendChild( panel.dom )\n        return panel\n    }\n\n    function showPanel ( id ) {\n        for ( var i = 0; i < container.children.length; i++ ) {\n            container.children[ i ].style.display = i === id ? 'block' : 'none'\n        }\n\n        mode = id\n    }\n\n    //\n\n    var beginTime = ( performance || Date ).now(),\n        prevTime = beginTime,\n        frames = 0\n\n    var fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) )\n    var msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) )\n\n    if ( self.performance && self.performance.memory ) {\n        var memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) )\n    }\n\n    showPanel( 0 )\n\n    return {\n        REVISION: 16,\n\n        dom: container,\n\n        addPanel: addPanel,\n        showPanel: showPanel,\n\n        begin: function () {\n            beginTime = ( performance || Date ).now()\n        },\n\n        end: function () {\n            frames++\n\n            var time = ( performance || Date ).now()\n\n            msPanel.update( time - beginTime, 200 )\n\n            if ( time >= prevTime + 1000 ) {\n                fpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 )\n\n                prevTime = time\n                frames = 0\n\n                if ( memPanel ) {\n                    var memory = performance.memory\n                    memPanel.update(\n                        memory.usedJSHeapSize / 1048576,\n                        memory.jsHeapSizeLimit / 1048576\n                    )\n                }\n            }\n\n            return time\n        },\n\n        update: function () {\n            beginTime = this.end()\n        },\n\n        // Backwards Compatibility\n\n        domElement: container,\n        setMode: showPanel,\n    }\n}\n\nStats.Panel = function ( name, fg, bg ) {\n    var min = Infinity,\n        max = 0,\n        round = Math.round\n    var PR = round( window.devicePixelRatio || 1 )\n\n    var WIDTH = 80 * PR,\n        HEIGHT = 48 * PR,\n        TEXT_X = 3 * PR,\n        TEXT_Y = 2 * PR,\n        GRAPH_X = 3 * PR,\n        GRAPH_Y = 15 * PR,\n        GRAPH_WIDTH = 74 * PR,\n        GRAPH_HEIGHT = 30 * PR\n\n    var canvas = document.createElement( 'canvas' )\n    canvas.width = WIDTH\n    canvas.height = HEIGHT\n    canvas.style.cssText = 'width:80px;height:48px'\n\n    var context = canvas.getContext( '2d' )\n    context.font = 'bold ' + 9 * PR + 'px Helvetica,Arial,sans-serif'\n    context.textBaseline = 'top'\n\n    context.fillStyle = bg\n    context.fillRect( 0, 0, WIDTH, HEIGHT )\n\n    context.fillStyle = fg\n    context.fillText( name, TEXT_X, TEXT_Y )\n    context.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT )\n\n    context.fillStyle = bg\n    context.globalAlpha = 0.9\n    context.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT )\n\n    return {\n        dom: canvas,\n\n        update: function ( value, maxValue ) {\n            min = Math.min( min, value )\n            max = Math.max( max, value )\n\n            context.fillStyle = bg\n            context.globalAlpha = 1\n            context.fillRect( 0, 0, WIDTH, GRAPH_Y )\n            context.fillStyle = fg\n            context.fillText(\n                round( value ) +\n                ' ' +\n                name +\n                ' (' +\n                round( min ) +\n                '-' +\n                round( max ) +\n                ')',\n                TEXT_X,\n                TEXT_Y\n            )\n\n            context.drawImage(\n                canvas,\n                GRAPH_X + PR,\n                GRAPH_Y,\n                GRAPH_WIDTH - PR,\n                GRAPH_HEIGHT,\n                GRAPH_X,\n                GRAPH_Y,\n                GRAPH_WIDTH - PR,\n                GRAPH_HEIGHT\n            )\n\n            context.fillRect(\n                GRAPH_X + GRAPH_WIDTH - PR,\n                GRAPH_Y,\n                PR,\n                GRAPH_HEIGHT\n            )\n\n            context.fillStyle = bg\n            context.globalAlpha = 0.9\n            context.fillRect(\n                GRAPH_X + GRAPH_WIDTH - PR,\n                GRAPH_Y,\n                PR,\n                round( ( 1 - value / maxValue ) * GRAPH_HEIGHT )\n            )\n        },\n    }\n}\n\nexport {\n    Stats as\n    default\n}\n"],"sourceRoot":""}