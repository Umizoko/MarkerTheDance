{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/index.js","webpack:///./src/js/module/stats.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAiC;;AAEjC;;AAEA;;AAEA,kCAAkC;AAClC,6CAA6C;AAC7C;AACA;AACA,KAAK;;AAEL,4DAA4D;AAC5D,iCAAiC;AACjC;;;AAGA,oCAAoC;AACpC,wBAAwB;;;AAGxB,uDAAuD;AACvD,kCAAkC;AAClC;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;;AAGL;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2CAA2C;AAC3C,sEAAsE;AACtE,KAAK;;;AAGL;AACA,oDAAoD;AACpD,mBAAmB;AACnB,KAAK;AACL;AACA;AACA,iCAAiC;AACjC,wDAAwD;AACxD,8CAA8C;AAC9C,oEAAoE;AACpE;AACA;;;AAGA;AACA,oCAAoC;AACpC,mEAAmE;AACnE;AACA;AACA;AACA,KAAK;AACL,yBAAyB;;AAEzB;AACA,gDAAgD;AAChD,6CAA6C;AAC7C;AACA;AACA;AACA,KAAK;AACL,2CAA2C;AAC3C,wBAAwB;AACxB,oCAAoC;AACpC,yBAAyB;;;AAGzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;;AAEA,SAAS;AACT;AACA;AACA;;;AAGA;AACA,kEAAkE;AAClE,gDAAgD;AAChD,wDAAwD;AACxD,4DAA4D;AAC5D,qCAAqC;;AAErC;AACA,sBAAsB,qDAAI;AAC1B;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;AClJA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAwB,MAAM,OAAO,eAAe,YAAY;AAChE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,+BAA+B;AACvD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAKC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/index.js\");\n","import Stat from './module/stats'\r\n\r\nwindow.addEventListener( \"load\", init );\r\n\r\nfunction init () {\r\n\r\n    var scene = new THREE.Scene(); // シーンの作成\r\n    var renderer = new THREE.WebGLRenderer( { // レンダラの作成\r\n        canvas: document.querySelector( \"#threeCanvas\" ),\r\n        alpha: true,\r\n    } );\r\n\r\n    renderer.setClearColor( new THREE.Color( \"black\" ), 0 ); // レンダラの背景色\r\n    renderer.setSize( 640, 480 ); // レンダラのサイズ\r\n    renderer.gammaOutput = true;\r\n\r\n\r\n    var camera = new THREE.Camera(); // カメラの作成\r\n    scene.add( camera ); // カメラをシーンに追加\r\n\r\n\r\n    var light = new THREE.DirectionalLight( 0xffffff ); // 平行光源（白）を作成\r\n    light.position.set( 0, 0, 2 ); // カメラ方向から照らす\r\n    scene.add( light );\r\n\r\n\r\n    // arToolkitSource\r\n    const source = new THREEx.ArToolkitSource( {\r\n        sourceType: \"webcam\",\r\n    } );\r\n    source.init( function onReady () {\r\n        onResize();\r\n    } );\r\n\r\n\r\n    // set arToolkitContext\r\n    const context = new THREEx.ArToolkitContext( { // arToolkitContextの作成\r\n        debug: false, // デバッグ用キャンバス表示（デフォルトfalse）\r\n        cameraParametersUrl: \"ar/camera_para.dat\", // カメラパラメータファイル\r\n        detectionMode: \"mono\", // 検出モード（color/color_and_matrix/mono/mono_and_matrix）\r\n        imageSmoothingEnabled: true, // 画像をスムージングするか（デフォルトfalse）\r\n        maxDetectionRate: 30, // マーカの検出レート（デフォルト60）\r\n        canvasWidth: source.parameters.sourceWidth, // マーカ検出用画像の幅（デフォルト640）\r\n        canvasHeight: source.parameters.sourceHeight, // マーカ検出用画像の高さ（デフォルト480）\r\n    } );\r\n    context.init( function onCompleted () { // コンテクスト初期化が完了したら\r\n        camera.projectionMatrix.copy( context.getProjectionMatrix() ); // 射影行列をコピー\r\n    } );\r\n\r\n\r\n    // resiza\r\n    window.addEventListener( \"resize\", function () { // ウィンドウがリサイズされたら\r\n        onResize(); // リサイズ処理\r\n    } );\r\n    // リサイズ関数\r\n    function onResize () {\r\n        source.onResizeElement(); // トラッキングソースをリサイズ\r\n        source.copyElementSizeTo( renderer.domElement ); // レンダラも同じサイズに\r\n        if ( context.arController !== null ) { // arControllerがnullでなければ\r\n            source.copyElementSizeTo( context.arController.canvas ); // それも同じサイズに\r\n        }\r\n    }\r\n\r\n\r\n    // Marker検出時\r\n    var marker1 = new THREE.Group(); // マーカをグループとして作成\r\n    var controls = new THREEx.ArMarkerControls( context, marker1, { // マーカを登録\r\n        size: 1,\r\n        type: \"pattern\", // マーカのタイプ\r\n        patternUrl: \"ar/hiro.patt\", // マーカファイル\r\n    } );\r\n    scene.add( marker1 ); // マーカをシーンに追加\r\n\r\n    // モデル（メッシュ）\r\n    var geo = new THREE.CubeGeometry( 1, 1, 1 ); // cube ジオメトリ（サイズは 1x1x1）\r\n    var mat = new THREE.MeshNormalMaterial( { // マテリアルの作成\r\n        transparent: true, // 透過\r\n        opacity: 0.5, // 不透明度\r\n        side: THREE.DoubleSide, // 内側も描く\r\n    } );\r\n    var mesh1 = new THREE.Mesh( geo, mat ); // メッシュを生成\r\n    mesh1.name = \"cube\"; // メッシュの名前（後でピッキングで使う）\r\n    mesh1.position.set( 0, 0.5, 0 ); // 初期位置\r\n    marker1.add( mesh1 ); // メッシュをマーカに追加\r\n\r\n\r\n    let mixier;\r\n    let loader = new THREE.GLTFLoader();\r\n\r\n    loader.load(\r\n        './assets/voxel/umizoko.gltf',\r\n        ( gltf ) => {\r\n\r\n            // modelをgroupに追加\r\n            marker1.add( gltf.scene );\r\n\r\n            // animaiton再生\r\n            const animations = gltf.animations;\r\n            console.log( animations );\r\n            console.log( gltf.scene );\r\n            if ( animations && animations.length ) {\r\n                let i;\r\n                mixier = new THREE.AnimationMixer( gltf.scene );\r\n                for ( i = 0; i < animations.length; i++ ) mixier.clipAction( animations[ i ] ).play();\r\n            }\r\n\r\n        },\r\n        ( xhr ) => ( console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ) ),\r\n        ( error ) => ( console.log( 'An error happened ', error ) )\r\n    );\r\n\r\n\r\n    // マーカ隠蔽（cloaking）\r\n    // var videoTex = new THREE.VideoTexture( source.domElement ); // 映像をテクスチャとして取得\r\n    // videoTex.minFilter = THREE.NearestFilter; // 映像テクスチャのフィルタ処理\r\n    // var cloak = new THREEx.ArMarkerCloak( videoTex ); // マーカ隠蔽(cloak)オブジェクト\r\n    // cloak.object3d.material.uniforms.opacity.value = 1.0; // cloakの不透明度\r\n    // marker1.add( cloak.object3d ); // cloakをマーカに追加\r\n\r\n    // performance\r\n    const stats = new Stat();\r\n    document.body.appendChild( stats.dom );\r\n\r\n    const clock = new THREE.Clock();\r\n\r\n    // render\r\n    function render () {\r\n\r\n        // obs performance\r\n        stats.update();\r\n\r\n        requestAnimationFrame( render );\r\n\r\n        if ( source.ready === false ) return;\r\n\r\n        // ar\r\n        context.update( source.domElement );\r\n\r\n        // animation\r\n        if ( mixier ) mixier.update( clock.getDelta() );\r\n\r\n        renderer.render( scene, camera );\r\n    }\r\n\r\n    render();\r\n\r\n}\r\n","/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar Stats = function () {\r\n    var mode = 0\r\n\r\n    var container = document.createElement( 'div' )\r\n    container.style.cssText =\r\n        'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000'\r\n    container.addEventListener(\r\n        'click',\r\n        function ( event ) {\r\n            event.preventDefault()\r\n            showPanel( ++mode % container.children.length )\r\n        },\r\n        false\r\n    )\r\n\r\n    //\r\n\r\n    function addPanel ( panel ) {\r\n        container.appendChild( panel.dom )\r\n        return panel\r\n    }\r\n\r\n    function showPanel ( id ) {\r\n        for ( var i = 0; i < container.children.length; i++ ) {\r\n            container.children[ i ].style.display = i === id ? 'block' : 'none'\r\n        }\r\n\r\n        mode = id\r\n    }\r\n\r\n    //\r\n\r\n    var beginTime = ( performance || Date ).now(),\r\n        prevTime = beginTime,\r\n        frames = 0\r\n\r\n    var fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) )\r\n    var msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) )\r\n\r\n    if ( self.performance && self.performance.memory ) {\r\n        var memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) )\r\n    }\r\n\r\n    showPanel( 0 )\r\n\r\n    return {\r\n        REVISION: 16,\r\n\r\n        dom: container,\r\n\r\n        addPanel: addPanel,\r\n        showPanel: showPanel,\r\n\r\n        begin: function () {\r\n            beginTime = ( performance || Date ).now()\r\n        },\r\n\r\n        end: function () {\r\n            frames++\r\n\r\n            var time = ( performance || Date ).now()\r\n\r\n            msPanel.update( time - beginTime, 200 )\r\n\r\n            if ( time >= prevTime + 1000 ) {\r\n                fpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 )\r\n\r\n                prevTime = time\r\n                frames = 0\r\n\r\n                if ( memPanel ) {\r\n                    var memory = performance.memory\r\n                    memPanel.update(\r\n                        memory.usedJSHeapSize / 1048576,\r\n                        memory.jsHeapSizeLimit / 1048576\r\n                    )\r\n                }\r\n            }\r\n\r\n            return time\r\n        },\r\n\r\n        update: function () {\r\n            beginTime = this.end()\r\n        },\r\n\r\n        // Backwards Compatibility\r\n\r\n        domElement: container,\r\n        setMode: showPanel,\r\n    }\r\n}\r\n\r\nStats.Panel = function ( name, fg, bg ) {\r\n    var min = Infinity,\r\n        max = 0,\r\n        round = Math.round\r\n    var PR = round( window.devicePixelRatio || 1 )\r\n\r\n    var WIDTH = 80 * PR,\r\n        HEIGHT = 48 * PR,\r\n        TEXT_X = 3 * PR,\r\n        TEXT_Y = 2 * PR,\r\n        GRAPH_X = 3 * PR,\r\n        GRAPH_Y = 15 * PR,\r\n        GRAPH_WIDTH = 74 * PR,\r\n        GRAPH_HEIGHT = 30 * PR\r\n\r\n    var canvas = document.createElement( 'canvas' )\r\n    canvas.width = WIDTH\r\n    canvas.height = HEIGHT\r\n    canvas.style.cssText = 'width:80px;height:48px'\r\n\r\n    var context = canvas.getContext( '2d' )\r\n    context.font = 'bold ' + 9 * PR + 'px Helvetica,Arial,sans-serif'\r\n    context.textBaseline = 'top'\r\n\r\n    context.fillStyle = bg\r\n    context.fillRect( 0, 0, WIDTH, HEIGHT )\r\n\r\n    context.fillStyle = fg\r\n    context.fillText( name, TEXT_X, TEXT_Y )\r\n    context.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT )\r\n\r\n    context.fillStyle = bg\r\n    context.globalAlpha = 0.9\r\n    context.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT )\r\n\r\n    return {\r\n        dom: canvas,\r\n\r\n        update: function ( value, maxValue ) {\r\n            min = Math.min( min, value )\r\n            max = Math.max( max, value )\r\n\r\n            context.fillStyle = bg\r\n            context.globalAlpha = 1\r\n            context.fillRect( 0, 0, WIDTH, GRAPH_Y )\r\n            context.fillStyle = fg\r\n            context.fillText(\r\n                round( value ) +\r\n                ' ' +\r\n                name +\r\n                ' (' +\r\n                round( min ) +\r\n                '-' +\r\n                round( max ) +\r\n                ')',\r\n                TEXT_X,\r\n                TEXT_Y\r\n            )\r\n\r\n            context.drawImage(\r\n                canvas,\r\n                GRAPH_X + PR,\r\n                GRAPH_Y,\r\n                GRAPH_WIDTH - PR,\r\n                GRAPH_HEIGHT,\r\n                GRAPH_X,\r\n                GRAPH_Y,\r\n                GRAPH_WIDTH - PR,\r\n                GRAPH_HEIGHT\r\n            )\r\n\r\n            context.fillRect(\r\n                GRAPH_X + GRAPH_WIDTH - PR,\r\n                GRAPH_Y,\r\n                PR,\r\n                GRAPH_HEIGHT\r\n            )\r\n\r\n            context.fillStyle = bg\r\n            context.globalAlpha = 0.9\r\n            context.fillRect(\r\n                GRAPH_X + GRAPH_WIDTH - PR,\r\n                GRAPH_Y,\r\n                PR,\r\n                round( ( 1 - value / maxValue ) * GRAPH_HEIGHT )\r\n            )\r\n        },\r\n    }\r\n}\r\n\r\nexport {\r\n    Stats as\r\n    default\r\n}\r\n"],"sourceRoot":""}