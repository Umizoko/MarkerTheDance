{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/module/stats.js","webpack:///./src/js/module/FBXModel.js","webpack:///./src/js/module/BufferLoader.js","webpack:///./src/js/module/Audio.js","webpack:///./src/js/Engine.js","webpack:///./src/js/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Stats","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","id","children","length","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","fg","bg","min","Infinity","max","round","Math","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","maxValue","drawImage","FBXModel","[object Object]","filename","scene","group","textureCube","_filename","_scene","_group","_mixier","_clock","THREE","Clock","_textureCube","_meshName","FBXLoader","load","mixier","AnimationMixer","clipAction","animations","play","scale","set","add","map","index","type","material","envMap","shininess","reflectivity","castShadow","getDelta","BufferLoader","urlList","callback","onload","bufferList","Array","loadCount","url","request","XMLHttpRequest","open","responseType","loader","decodeAudioData","response","buffer","alert","error","console","onerror","send","loadBuffer","Audio","bufferNow","playNow","createSource","source","gainNode","start","gain","createBufferSource","createGain","loop","connect","destination","Engine_Engine","canvasElement","getElementById","Scene","renderer","WebGLRenderer","querySelector","antialias","alpha","setClearColor","Color","myCanvas","canvasWidth","clientWidth","canvasHeight","clientHeight","setSize","gammaOutput","gammaInput","shadowMap","enabled","camera","Camera","THREEx","ArToolkitSource","sourceType","init","onResize","ArToolkitContext","debug","cameraParametersUrl","detectionMode","imageSmoothingEnabled","maxDetectionRate","parameters","sourceWidth","sourceHeight","projectionMatrix","copy","getProjectionMatrix","marker","Group","ArMarkerControls","size","patternUrl","env","CubeTextureLoader","robot","AudioContext","webkitAudioContext","audioContext","audio","source1","ambientLight","AmbientLight","directionalLight","DirectionalLight","position","y","shadow","mapSize","floor","Mesh","BoxGeometry","MeshStandardMaterial","color","roughness","metalness","onResizeElement","copyElementSizeTo","arController","receiveShadow","tick","requestAnimationFrame","ready","patternMarkers","inCurrent","volumeFadeIn","volumeFadeOut","render"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,yCC9EA,IAAAC,EAAA,WACA,IAAAb,EAAA,EAEAc,EAAAC,SAAAC,cAAA,OAcA,SAAAC,EAAAC,GAEA,OADAJ,EAAAK,YAAAD,EAAAE,KACAF,EAGA,SAAAG,EAAAC,GACA,QAAAzC,EAAA,EAAwBA,EAAAiC,EAAAS,SAAAC,OAA+B3C,IACvDiC,EAAAS,SAAA1C,GAAA4C,MAAAC,QAAA7C,IAAAyC,EAAA,eAGAtB,EAAAsB,EAvBAR,EAAAW,MAAAE,QACA,uEACAb,EAAAc,iBACA,QACA,SAAAC,GACAA,EAAAC,iBACAT,IAAArB,EAAAc,EAAAS,SAAAC,UAEA,GAoBA,IAAAO,GAAAC,aAAAC,MAAAC,MACAC,EAAAJ,EACAK,EAAA,EAEAC,EAAApB,EAAA,IAAAJ,EAAAyB,MAAA,sBACAC,EAAAtB,EAAA,IAAAJ,EAAAyB,MAAA,qBAEA,GAAAE,KAAAR,aAAAQ,KAAAR,YAAAS,OACA,IAAAC,EAAAzB,EAAA,IAAAJ,EAAAyB,MAAA,qBAKA,OAFAjB,EAAA,GAEA,CACAsB,SAAA,GAEAvB,IAAAN,EAEAG,WACAI,YAEAuB,MAAA,WACAb,GAAAC,aAAAC,MAAAC,OAGAW,IAAA,WACAT,IAEA,IAAAU,GAAAd,aAAAC,MAAAC,MAIA,GAFAK,EAAAQ,OAAAD,EAAAf,EAAA,KAEAe,GAAAX,EAAA,MACAE,EAAAU,OAAA,IAAAX,GAAAU,EAAAX,GAAA,KAEAA,EAAAW,EACAV,EAAA,EAEAM,GAAA,CACA,IAAAD,EAAAT,YAAAS,OACAC,EAAAK,OACAN,EAAAO,eAAA,QACAP,EAAAQ,gBAAA,SAKA,OAAAH,GAGAC,OAAA,WACAhB,EAAAmB,KAAAL,OAKAM,WAAArC,EACAsC,QAAA/B,IAIAR,EAAAyB,MAAA,SAAAlD,EAAAiE,EAAAC,GACA,IAAAC,EAAAC,IACAC,EAAA,EACAC,EAAAC,KAAAD,MACAE,EAAAF,EAAAG,OAAAC,kBAAA,GAEAC,EAAA,GAAAH,EACAI,EAAA,GAAAJ,EACAK,EAAA,EAAAL,EACAM,EAAA,EAAAN,EACAO,EAAA,EAAAP,EACAQ,EAAA,GAAAR,EACAS,EAAA,GAAAT,EACAU,EAAA,GAAAV,EAEAW,EAAAxD,SAAAC,cAAA,UACAuD,EAAAC,MAAAT,EACAQ,EAAAE,OAAAT,EACAO,EAAA9C,MAAAE,QAAA,yBAEA,IAAA+C,EAAAH,EAAAI,WAAA,MAeA,OAdAD,EAAAE,KAAA,UAAAhB,EAAA,gCACAc,EAAAG,aAAA,MAEAH,EAAAI,UAAAxB,EACAoB,EAAAK,SAAA,IAAAhB,EAAAC,GAEAU,EAAAI,UAAAzB,EACAqB,EAAAM,SAAA5F,EAAA6E,EAAAC,GACAQ,EAAAK,SAAAZ,EAAAC,EAAAC,EAAAC,GAEAI,EAAAI,UAAAxB,EACAoB,EAAAO,YAAA,GACAP,EAAAK,SAAAZ,EAAAC,EAAAC,EAAAC,GAEA,CACAlD,IAAAmD,EAEAxB,OAAA,SAAAjD,EAAAoF,GACA3B,EAAAI,KAAAJ,MAAAzD,GACA2D,EAAAE,KAAAF,MAAA3D,GAEA4E,EAAAI,UAAAxB,EACAoB,EAAAO,YAAA,EACAP,EAAAK,SAAA,IAAAhB,EAAAK,GACAM,EAAAI,UAAAzB,EACAqB,EAAAM,SACAtB,EAAA5D,GACA,IACAV,EACA,KACAsE,EAAAH,GACA,IACAG,EAAAD,GACA,IACAQ,EACAC,GAGAQ,EAAAS,UACAZ,EACAJ,EAAAP,EACAQ,EACAC,EAAAT,EACAU,EACAH,EACAC,EACAC,EAAAT,EACAU,GAGAI,EAAAK,SACAZ,EAAAE,EAAAT,EACAQ,EACAR,EACAU,GAGAI,EAAAI,UAAAxB,EACAoB,EAAAO,YAAA,GACAP,EAAAK,SACAZ,EAAAE,EAAAT,EACAQ,EACAR,EACAF,GAAA,EAAA5D,EAAAoF,GAAAZ,OC/Ke,MAAAc,EAUfC,YAAAC,EAAAC,EAAAC,EAAAC,GAEAvC,KAAAwC,UAAAJ,EACApC,KAAAyC,OAAAJ,EACArC,KAAA0C,OAAAJ,EACAtC,KAAA2C,QACA3C,KAAA4C,OAAA,IAAAC,MAAAC,MACA9C,KAAA+C,aAAAR,EAEAvC,KAAAgD,UAAA,cASAb,QAEA,IAAAU,MAAAI,WACAC,KAEAlD,KAAAwC,UAEAnF,IAEAA,EAAA8F,OAAA,IAAAN,MAAAO,eAAA/F,GACA2C,KAAA2C,QAAAtF,EAAA8F,OAEA9F,EAAA8F,OAAAE,WAAAhG,EAAAiG,WAAA,IACAC,OAGAlG,EAAAmG,MAAAC,IAAA,aAEAzD,KAAA0C,OAAAgB,IAAArG,GAGAA,EAAAgB,SAAAsF,IAAA,CAAA/G,EAAAgH,KAGAhH,EAAAiH,OAAA7D,KAAAgD,YAEApG,EAAAkH,SAAAC,OAAA/D,KAAA+C,aACAnG,EAAAkH,SAAAE,UAAA,GACApH,EAAAkH,SAAAG,aAAA,GAGArH,EAAAsH,YAAA,OAaA/B,SAGAnC,KAAA2C,SAAA3C,KAAA2C,QAAA9C,OAAAG,KAAA4C,OAAAuB,aC3Ee,MAAAC,EAUfjC,YAAAX,EAAA6C,EAAAC,GACAtE,KAAAwB,UACAxB,KAAAqE,UACArE,KAAAuE,OAAAD,EACAtE,KAAAwE,WAAA,IAAAC,MACAzE,KAAA0E,UAAA,EAUAvC,WAAAwC,EAAAf,GAEA,IAAAgB,EAAA,IAAAC,eACAD,EAAAE,KAAA,MAAAH,GAAA,GACAC,EAAAG,aAAA,cAEA,IAAAC,EAAAhF,KAEA4E,EAAAL,OAAA,WAEAS,EAAAxD,QAAAyD,gBACAL,EAAAM,SACA,SAAAC,GACAA,GAIAH,EAAAR,WAAAZ,GAAAuB,IACAH,EAAAN,WAAAM,EAAAX,QAAA/F,QACA0G,EAAAT,OAAAS,EAAAR,aALAY,MAAA,6BAAAT,IAOA,SAAAU,GACAC,QAAAD,MAAA,wBAAAA,MAKAT,EAAAW,QAAA,WACAH,MAAA,4BAGAR,EAAAY,OAQArD,OACA,QAAAxG,EAAA,EAAwBA,EAAAqE,KAAAqE,QAAA/F,SAAyB3C,EACjDqE,KAAAyF,WAAAzF,KAAAqE,QAAA1I,OClEe,MAAA+J,EAQfvD,YAAAwD,EAAAnE,GAEAxB,KAAA4F,QAAA5F,KAAA6F,aAAAF,EAAAnE,GACAxB,KAAA8F,OAAA9F,KAAA4F,QAAAE,OACA9F,KAAA+F,SAAA/F,KAAA4F,QAAAG,SAGA/F,KAAA8F,OAAAE,MAAA,GAGAhG,KAAA+F,SAAAE,KAAArJ,MAAA,EAYAuF,aAAAgD,EAAA3D,GAEA,IAAAsE,EAAAtE,EAAA0E,qBAEAH,EAAAvE,EAAA2E,aASA,OARAL,EAAAX,SAEAW,EAAAM,MAAA,EAEAN,EAAAO,QAAAN,GAEAA,EAAAM,QAAA7E,EAAA8E,aAEA,CACAR,SACAC,YAWA5D,eAEAnC,KAAA+F,SAAAE,KAAArJ,OAAA,IAAAoD,KAAA+F,SAAAE,KAAArJ,OAAA,KASAuF,gBAEAnC,KAAA+F,SAAAE,KAAArJ,MAAA,EAAAoD,KAAA+F,SAAAE,KAAArJ,OAAA,IACAoD,KAAA+F,SAAAE,KAAArJ,MAAA,IAAAoD,KAAA+F,SAAAE,KAAArJ,OAAA,MCvEe,MAAM2J,EAErBpE,YAAAqE,GAEAxG,KAAAqB,OAAAxD,SAAA4I,eAAAD,GAKArE,OAQA,MAAAE,EAAA,IAAAQ,MAAA6D,MAIAC,EAAA,IAAA9D,MAAA+D,cAAA,CACAvF,OAAAxD,SAAAgJ,cAAA,gBACAC,WAAA,EACAC,OAAA,IAGAJ,EAAAK,cAAA,IAAAnE,MAAAoE,MAAA,YACA,MAAAC,EAAArJ,SAAAgJ,cAAA,gBACA,IAAAM,EAAAD,EAAAE,YACAC,EAAAH,EAAAI,aACAX,EAAAY,QAAAJ,EAAAE,GACAV,EAAAa,aAAA,EACAb,EAAAc,YAAA,EACAd,EAAAe,UAAAC,SAAA,EAGA,MAAAC,EAAA,IAAA/E,MAAAgF,OACAxF,EAAAqB,IAAAkE,GAIA,MAAA9B,EAAA,IAAAgC,OAAAC,gBAAA,CACAC,WAAA,WAGAlC,EAAAmC,KAAA,WACAC,MAKA,MAAA1G,EAAA,IAAAsG,OAAAK,iBAAA,CACAC,OAAA,EACAC,oBAAA,qBACAC,cAAA,OACAC,uBAAA,EACAC,iBAAA,GACArB,YAAArB,EAAA2C,WAAAC,YACArB,aAAAvB,EAAA2C,WAAAE,eAGAnH,EAAAyG,KAAA,WAGAL,EAAAgB,iBAAAC,KAAArH,EAAAsH,yBAMA,MAAAC,EAAA,IAAAlG,MAAAmG,MACA3G,EAAAqB,IAAAqF,GAQA,IAAAjB,OAAAmB,iBACAzH,EACAuH,EAPA,CACAG,KAAA,EACArF,KAAA,UACAsF,WAAA,iBAHA,MAaAC,EAAA,0BACA7G,GAFA,IAAAM,MAAAwG,mBAEAnG,KAAA,CACAkG,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,aAKAE,EAAA,IAA0BpH,EAC1B,qCACAG,EACA0G,EACAxG,GAGA+G,EAAArB,OAIAtH,OAAA4I,aAAA5I,OAAA4I,cAAA5I,OAAA6I,mBACA,MAAAC,EAAA,IAAAF,aACA,IAAAG,EAGA,IAAiCtF,EACjCqF,EACA,CACA,qCASA,SAAAjF,GAEA,MAAAmF,EAAAF,EAAAvD,qBACAyD,EAAAxE,OAAAX,EAAA,GAEAmF,EAAAtD,QAAAoD,EAAAnD,aACAoD,EAAA,IAAwBhE,EAAKiE,EAAAxE,OAAAsE,KAT7BvG,OAeA,MAAA0G,EAAA,IAAA/G,MAAAgH,aAAA,aACAd,EAAArF,IAAAkG,GAIA,MAAAE,EAAA,IAAAjH,MAAAkH,iBAAA,YACAD,EAAA5F,YAAA,EACA4F,EAAAE,SAAAC,EAAA,EACAH,EAAAI,OAAAC,QAAA7I,MAAA,KACAwI,EAAAI,OAAAC,QAAA5I,OAAA,KACAwH,EAAArF,IAAAoG,GAIA,MAAAM,EAAA,IAAAvH,MAAAwH,KACA,IAAAxH,MAAAyH,YAAA,QACA,IAAAzH,MAAA0H,qBAAA,CACAC,MAAA,SACAC,UAAA,EACAC,UAAA,KAiDA,SAAAxC,IAEApC,EAAA6E,kBAEA7E,EAAA8E,kBAAAjE,EAAA1G,YAEA,OAAAuB,EAAAqJ,cAEA/E,EAAA8E,kBAAApJ,EAAAqJ,aAAAxJ,QAtDA+I,EAAAJ,SAAAC,GAAA,IACAG,EAAAU,eAAA,EACA/B,EAAArF,IAAA0G,GAIA,SAAAW,IAEAC,sBAAAD,GAGA,QAAAjF,EAAAmF,MAAA,OAMAzJ,EAAA3B,OAAAiG,EAAA7F,aAIA,IAAAuB,EAAAqJ,aAAAK,eAAA,GAAAC,UAEAzB,EAAA0B,eAIA1B,EAAA2B,gBAKA/B,EAAAzJ,SAEA8G,EAAA2E,OAAAjJ,EAAAuF,GAIAjH,OAAAjC,iBAAA,oBAEAwJ,MApCA6C,ICxKApK,OAAAjC,iBAAA,YAEA,IAAsB6H,EAAM,eAE5B0B","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar Stats = function () {\r\n    var mode = 0\r\n\r\n    var container = document.createElement( 'div' )\r\n    container.style.cssText =\r\n        'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000'\r\n    container.addEventListener(\r\n        'click',\r\n        function ( event ) {\r\n            event.preventDefault()\r\n            showPanel( ++mode % container.children.length )\r\n        },\r\n        false\r\n    )\r\n\r\n    //\r\n\r\n    function addPanel ( panel ) {\r\n        container.appendChild( panel.dom )\r\n        return panel\r\n    }\r\n\r\n    function showPanel ( id ) {\r\n        for ( var i = 0; i < container.children.length; i++ ) {\r\n            container.children[ i ].style.display = i === id ? 'block' : 'none'\r\n        }\r\n\r\n        mode = id\r\n    }\r\n\r\n    //\r\n\r\n    var beginTime = ( performance || Date ).now(),\r\n        prevTime = beginTime,\r\n        frames = 0\r\n\r\n    var fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) )\r\n    var msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) )\r\n\r\n    if ( self.performance && self.performance.memory ) {\r\n        var memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) )\r\n    }\r\n\r\n    showPanel( 0 )\r\n\r\n    return {\r\n        REVISION: 16,\r\n\r\n        dom: container,\r\n\r\n        addPanel: addPanel,\r\n        showPanel: showPanel,\r\n\r\n        begin: function () {\r\n            beginTime = ( performance || Date ).now()\r\n        },\r\n\r\n        end: function () {\r\n            frames++\r\n\r\n            var time = ( performance || Date ).now()\r\n\r\n            msPanel.update( time - beginTime, 200 )\r\n\r\n            if ( time >= prevTime + 1000 ) {\r\n                fpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 )\r\n\r\n                prevTime = time\r\n                frames = 0\r\n\r\n                if ( memPanel ) {\r\n                    var memory = performance.memory\r\n                    memPanel.update(\r\n                        memory.usedJSHeapSize / 1048576,\r\n                        memory.jsHeapSizeLimit / 1048576\r\n                    )\r\n                }\r\n            }\r\n\r\n            return time\r\n        },\r\n\r\n        update: function () {\r\n            beginTime = this.end()\r\n        },\r\n\r\n        // Backwards Compatibility\r\n\r\n        domElement: container,\r\n        setMode: showPanel,\r\n    }\r\n}\r\n\r\nStats.Panel = function ( name, fg, bg ) {\r\n    var min = Infinity,\r\n        max = 0,\r\n        round = Math.round\r\n    var PR = round( window.devicePixelRatio || 1 )\r\n\r\n    var WIDTH = 80 * PR,\r\n        HEIGHT = 48 * PR,\r\n        TEXT_X = 3 * PR,\r\n        TEXT_Y = 2 * PR,\r\n        GRAPH_X = 3 * PR,\r\n        GRAPH_Y = 15 * PR,\r\n        GRAPH_WIDTH = 74 * PR,\r\n        GRAPH_HEIGHT = 30 * PR\r\n\r\n    var canvas = document.createElement( 'canvas' )\r\n    canvas.width = WIDTH\r\n    canvas.height = HEIGHT\r\n    canvas.style.cssText = 'width:80px;height:48px'\r\n\r\n    var context = canvas.getContext( '2d' )\r\n    context.font = 'bold ' + 9 * PR + 'px Helvetica,Arial,sans-serif'\r\n    context.textBaseline = 'top'\r\n\r\n    context.fillStyle = bg\r\n    context.fillRect( 0, 0, WIDTH, HEIGHT )\r\n\r\n    context.fillStyle = fg\r\n    context.fillText( name, TEXT_X, TEXT_Y )\r\n    context.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT )\r\n\r\n    context.fillStyle = bg\r\n    context.globalAlpha = 0.9\r\n    context.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT )\r\n\r\n    return {\r\n        dom: canvas,\r\n\r\n        update: function ( value, maxValue ) {\r\n            min = Math.min( min, value )\r\n            max = Math.max( max, value )\r\n\r\n            context.fillStyle = bg\r\n            context.globalAlpha = 1\r\n            context.fillRect( 0, 0, WIDTH, GRAPH_Y )\r\n            context.fillStyle = fg\r\n            context.fillText(\r\n                round( value ) +\r\n                ' ' +\r\n                name +\r\n                ' (' +\r\n                round( min ) +\r\n                '-' +\r\n                round( max ) +\r\n                ')',\r\n                TEXT_X,\r\n                TEXT_Y\r\n            )\r\n\r\n            context.drawImage(\r\n                canvas,\r\n                GRAPH_X + PR,\r\n                GRAPH_Y,\r\n                GRAPH_WIDTH - PR,\r\n                GRAPH_HEIGHT,\r\n                GRAPH_X,\r\n                GRAPH_Y,\r\n                GRAPH_WIDTH - PR,\r\n                GRAPH_HEIGHT\r\n            )\r\n\r\n            context.fillRect(\r\n                GRAPH_X + GRAPH_WIDTH - PR,\r\n                GRAPH_Y,\r\n                PR,\r\n                GRAPH_HEIGHT\r\n            )\r\n\r\n            context.fillStyle = bg\r\n            context.globalAlpha = 0.9\r\n            context.fillRect(\r\n                GRAPH_X + GRAPH_WIDTH - PR,\r\n                GRAPH_Y,\r\n                PR,\r\n                round( ( 1 - value / maxValue ) * GRAPH_HEIGHT )\r\n            )\r\n        },\r\n    }\r\n}\r\n\r\nexport {\r\n    Stats as\r\n    default\r\n}\r\n","/**\r\n *FBXモデルを読み込むクラス\r\n *\r\n * @export\r\n * @class FBXModel\r\n */\r\nexport default class FBXModel {\r\n\r\n    /**\r\n     *Creates an instance of FBXModel.\r\n     * @param {String} filename\r\n     * @param {THREE.Scene} scene\r\n     * @param {THREE.Group} group\r\n     * @param {THREE.CubeTexture} textureCube\r\n     * @memberof FBXModel\r\n     */\r\n    constructor( filename, scene, group, textureCube ) {\r\n\r\n        this._filename = filename;\r\n        this._scene = scene;\r\n        this._group = group;\r\n        this._mixier;\r\n        this._clock = new THREE.Clock();\r\n        this._textureCube = textureCube;\r\n\r\n        this._meshName = 'SkinnedMesh';\r\n\r\n    }\r\n\r\n    /**\r\n     *初期化\r\n     *\r\n     * @memberof FBXModel\r\n     */\r\n    init() {\r\n\r\n        const loader = new THREE.FBXLoader();\r\n        loader.load(\r\n\r\n            this._filename,\r\n\r\n            ( object ) => {\r\n\r\n                object.mixier = new THREE.AnimationMixer( object );\r\n                this._mixier = object.mixier;\r\n\r\n                const action = object.mixier.clipAction( object.animations[ 0 ] );\r\n                action.play();\r\n\r\n                // scaling\r\n                object.scale.set( 0.01, 0.01, 0.01 );\r\n\r\n                this._group.add( object );\r\n\r\n                // Mesh抽出\r\n                object.children.map( ( value, index ) => {\r\n\r\n                    // Meshの設定\r\n                    if ( value.type === this._meshName ) {\r\n\r\n                        value.material.envMap = this._textureCube;\r\n                        value.material.shininess = 90;\r\n                        value.material.reflectivity = 0.8;\r\n\r\n                        // shadow\r\n                        value.castShadow = true;\r\n                    }\r\n                } );\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     *update\r\n     *\r\n     * @memberof FBXModel\r\n     */\r\n    update() {\r\n\r\n        // Animationの更新\r\n        if ( this._mixier ) this._mixier.update( this._clock.getDelta() );\r\n\r\n    }\r\n\r\n}\r\n","/**\r\n *Audioデータを読み込むクラス\r\n *\r\n * @export\r\n * @class BufferLoader\r\n */\r\nexport default class BufferLoader {\r\n\r\n\r\n    /**\r\n     *Creates an instance of BufferLoader.\r\n     * @param {AudioContext} context\r\n     * @param {Array} urlList\r\n     * @param {callback} callback\r\n     * @memberof BufferLoader\r\n     */\r\n    constructor( context, urlList, callback ) {\r\n        this.context = context;\r\n        this.urlList = urlList;\r\n        this.onload = callback;\r\n        this.bufferList = new Array();\r\n        this.loadCount = 0;\r\n    }\r\n\r\n    /**\r\n     *Audioデータの読み込み\r\n     *\r\n     * @param {String} url\r\n     * @param {Number} index\r\n     * @memberof BufferLoader\r\n     */\r\n    loadBuffer( url, index ) {\r\n        // Load buffer asynchronously\r\n        var request = new XMLHttpRequest();\r\n        request.open( \"GET\", url, true );\r\n        request.responseType = \"arraybuffer\";\r\n\r\n        var loader = this;\r\n\r\n        request.onload = function () {\r\n            // Asynchronously decode the audio file data in request.response\r\n            loader.context.decodeAudioData(\r\n                request.response,\r\n                function ( buffer ) {\r\n                    if ( !buffer ) {\r\n                        alert( 'error decoding file data: ' + url );\r\n                        return;\r\n                    }\r\n                    loader.bufferList[ index ] = buffer;\r\n                    if ( ++loader.loadCount == loader.urlList.length )\r\n                        loader.onload( loader.bufferList );\r\n                },\r\n                function ( error ) {\r\n                    console.error( 'decodeAudioData error', error );\r\n                }\r\n            );\r\n        }\r\n\r\n        request.onerror = function () {\r\n            alert( 'BufferLoader: XHR error' );\r\n        }\r\n\r\n        request.send();\r\n    }\r\n\r\n    /**\r\n     *ロード実行\r\n     *\r\n     * @memberof BufferLoader\r\n     */\r\n    load() {\r\n        for ( var i = 0; i < this.urlList.length; ++i )\r\n            this.loadBuffer( this.urlList[ i ], i );\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n *Audioを制御するクラス\r\n *\r\n * @export\r\n * @class Audio\r\n */\r\nexport default class Audio {\r\n\r\n    /**\r\n     *Creates an instance of Audio.\r\n     * @param {AudioBuffer} bufferNow \r\n     * @param {AudioContext} context\r\n     * @memberof Audio\r\n     */\r\n    constructor( bufferNow, context ) {\r\n\r\n        this.playNow = this.createSource( bufferNow, context );\r\n        this.source = this.playNow.source;\r\n        this.gainNode = this.playNow.gainNode;\r\n\r\n        // Play the playNow track.\r\n        this.source.start( 0 );\r\n\r\n        // volume 0\r\n        this.gainNode.gain.value = 0;\r\n\r\n    }\r\n\r\n    /**\r\n     *ソース、エフェクトノード（Gain）を作成\r\n     *\r\n     * @param {AudioBuffer} buffer\r\n     * @param {AudioContext} context\r\n     * @returns {source, gainNode}\r\n     * @memberof Audio\r\n     */\r\n    createSource( buffer, context ) {\r\n\r\n        var source = context.createBufferSource();\r\n        // Create a gain node.\r\n        var gainNode = context.createGain();\r\n        source.buffer = buffer;\r\n        // Turn on looping.\r\n        source.loop = true;\r\n        // Connect source to gain.\r\n        source.connect( gainNode );\r\n        // Connect gain to destination.\r\n        gainNode.connect( context.destination );\r\n\r\n        return {\r\n            source: source,\r\n            gainNode: gainNode\r\n        };\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     *volumeをフェードインする\r\n     *\r\n     * @memberof Audio\r\n     */\r\n    volumeFadeIn() {\r\n\r\n        if ( this.gainNode.gain.value <= 1.0 ) this.gainNode.gain.value += 0.01;\r\n\r\n    }\r\n\r\n    /**\r\n     *volumeをフェードアウトする\r\n     *\r\n     * @memberof Audio\r\n     */\r\n    volumeFadeOut() {\r\n\r\n        if ( this.gainNode.gain.value > 0.0 ) this.gainNode.gain.value -= 0.01;\r\n        else if ( this.gainNode.gain.value < 0.0 ) this.gainNode.gain.value += 0.01;\r\n\r\n    }\r\n\r\n}\r\n","import Stat from './module/stats'\r\nimport FBXModel from './module/FBXModel'\r\nimport BufferLoader from './module/BufferLoader'\r\nimport Audio from './module/Audio'\r\n\r\nexport default class Engine {\r\n\r\n    constructor( canvasElement ) {\r\n\r\n        this.canvas = document.getElementById( canvasElement );\r\n\r\n    }\r\n\r\n\r\n    init() {\r\n\r\n        // performance\r\n        // const stats = new Stat();\r\n        // document.body.appendChild( stats.dom );\r\n\r\n\r\n        // create scene\r\n        const scene = new THREE.Scene();\r\n\r\n\r\n        // create renderer\r\n        const renderer = new THREE.WebGLRenderer( {\r\n            canvas: document.querySelector( \"#threeCanvas\" ),\r\n            antialias: true,\r\n            alpha: true,\r\n        } );\r\n\r\n        renderer.setClearColor( new THREE.Color( \"black\" ), 0 );\r\n        const myCanvas = document.querySelector( '#threeCanvas' );\r\n        let canvasWidth = myCanvas.clientWidth;\r\n        let canvasHeight = myCanvas.clientHeight;\r\n        renderer.setSize( canvasWidth, canvasHeight );\r\n        renderer.gammaOutput = true;\r\n        renderer.gammaInput = true;\r\n        renderer.shadowMap.enabled = true;\r\n\r\n        // create camera\r\n        const camera = new THREE.Camera();\r\n        scene.add( camera );\r\n\r\n\r\n        // arToolkitSource\r\n        const source = new THREEx.ArToolkitSource( {\r\n            sourceType: \"webcam\",\r\n        } );\r\n\r\n        source.init( function onReady () {\r\n            onResize();\r\n        } );\r\n\r\n\r\n        // create arToolkitContext\r\n        const context = new THREEx.ArToolkitContext( {\r\n            debug: false,\r\n            cameraParametersUrl: \"ar/camera_para.dat\",\r\n            detectionMode: \"mono\",\r\n            imageSmoothingEnabled: true,\r\n            maxDetectionRate: 30,\r\n            canvasWidth: source.parameters.sourceWidth,\r\n            canvasHeight: source.parameters.sourceHeight,\r\n        } );\r\n\r\n        context.init( function onCompleted () {\r\n\r\n            // コンテクスト初期化が完了\r\n            camera.projectionMatrix.copy( context.getProjectionMatrix() );\r\n\r\n        } );\r\n\r\n\r\n        // MarkerのGroup作成\r\n        const marker = new THREE.Group();\r\n        scene.add( marker );\r\n\r\n        // set arMarkerControls\r\n        const option = {\r\n            size: 1,\r\n            type: 'pattern',\r\n            patternUrl: 'ar/hiro.patt'\r\n        }\r\n        const controls = new THREEx.ArMarkerControls(\r\n            context,\r\n            marker,\r\n            option\r\n        );\r\n\r\n        // CubeMap(環境マップ)\r\n        const cubeTextureLoader = new THREE.CubeTextureLoader();\r\n        const env = './assets/env/Lycksele2/';\r\n        const textureCube = cubeTextureLoader.load( [\r\n            env + 'posx.jpg',\r\n            env + 'negx.jpg',\r\n            env + 'posy.jpg',\r\n            env + 'negy.jpg',\r\n            env + 'posz.jpg',\r\n            env + 'negz.jpg'\r\n        ] );\r\n\r\n\r\n        // モデル読み込み\r\n        const robot = new FBXModel(\r\n            './assets/robot/WaveHipHopDance.fbx',\r\n            scene,\r\n            marker,\r\n            textureCube\r\n        );\r\n\r\n        robot.init();\r\n\r\n\r\n        // Audioの設定\r\n        window.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n        const audioContext = new AudioContext();\r\n        let audio;\r\n\r\n        // BGM登録\r\n        const bufferLoader = new BufferLoader(\r\n            audioContext,\r\n            [\r\n                './assets/sound/Go_to_the_camp.mp3'\r\n            ],\r\n            finishedLoading\r\n        );\r\n\r\n        // 音声データのロード\r\n        bufferLoader.load();\r\n\r\n        // ロード後の処理\r\n        function finishedLoading ( bufferList ) {\r\n\r\n            const source1 = audioContext.createBufferSource();\r\n            source1.buffer = bufferList[ 0 ];\r\n\r\n            source1.connect( audioContext.destination );\r\n            audio = new Audio( source1.buffer, audioContext );\r\n\r\n        }\r\n\r\n\r\n        // AmbientLight\r\n        const ambientLight = new THREE.AmbientLight( 0xFFFFFF, 0.2 );\r\n        marker.add( ambientLight );\r\n\r\n\r\n        // Directional Light\r\n        const directionalLight = new THREE.DirectionalLight( 0xFFFFFF, 1 );\r\n        directionalLight.castShadow = true;\r\n        directionalLight.position.y = 4;\r\n        directionalLight.shadow.mapSize.width = 2048;\r\n        directionalLight.shadow.mapSize.height = 2048;\r\n        marker.add( directionalLight );\r\n\r\n\r\n        // floor\r\n        const floor = new THREE.Mesh(\r\n            new THREE.BoxGeometry( 2, 0.1, 2 ),\r\n            new THREE.MeshStandardMaterial( {\r\n                color: 0xFFFFFF,\r\n                roughness: 0,\r\n                metalness: 1,\r\n            } )\r\n        );\r\n        floor.position.y = -0.05;\r\n        floor.receiveShadow = true;\r\n        marker.add( floor );\r\n\r\n        tick();\r\n\r\n        function tick () {\r\n\r\n            requestAnimationFrame( tick );\r\n\r\n            // リソースが揃わなければreturn \r\n            if ( source.ready === false ) return;\r\n\r\n            // obs performance\r\n            // stats.update();\r\n\r\n            // ar\r\n            context.update( source.domElement );\r\n\r\n            // audio controll\r\n            // マーカーチェック時のみ音声を聞こえるようにする\r\n            if ( context.arController.patternMarkers[ 0 ].inCurrent === true ) {\r\n\r\n                audio.volumeFadeIn();\r\n\r\n            } else {\r\n\r\n                audio.volumeFadeOut();\r\n\r\n            }\r\n\r\n            // robot update\r\n            robot.update();\r\n\r\n            renderer.render( scene, camera );\r\n\r\n\r\n            // resiza\r\n            window.addEventListener( \"resize\", function () {\r\n\r\n                onResize();\r\n\r\n            } );\r\n\r\n        }\r\n\r\n        function onResize () {\r\n\r\n            source.onResizeElement();\r\n\r\n            source.copyElementSizeTo( renderer.domElement );\r\n\r\n            if ( context.arController !== null ) {\r\n\r\n                source.copyElementSizeTo( context.arController.canvas );\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n","import Engine from './Engine'\r\n\r\n// ロード後の処理\r\nwindow.addEventListener( 'load', () => {\r\n\r\n    const scene = new Engine( 'threeCanvas' );\r\n\r\n    scene.init();\r\n\r\n} );\r\n"],"sourceRoot":""}